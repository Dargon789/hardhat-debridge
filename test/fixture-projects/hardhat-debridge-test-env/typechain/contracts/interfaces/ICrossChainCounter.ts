/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ICrossChainCounterInterface extends utils.Interface {
  functions: {
    "receiveIncrementCommand(uint8,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "receiveIncrementCommand"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "receiveIncrementCommand",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveIncrementCommand",
    data: BytesLike
  ): Result;

  events: {
    "CounterIncremented(uint256,uint8,uint256,address)": EventFragment;
    "SupportedChainAdded(uint256,bytes)": EventFragment;
    "SupportedChainRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CounterIncremented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedChainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedChainRemoved"): EventFragment;
}

export interface CounterIncrementedEventObject {
  newCounterValue: BigNumber;
  amount: number;
  chainFrom: BigNumber;
  initiator: string;
}
export type CounterIncrementedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string],
  CounterIncrementedEventObject
>;

export type CounterIncrementedEventFilter =
  TypedEventFilter<CounterIncrementedEvent>;

export interface SupportedChainAddedEventObject {
  chainId: BigNumber;
  incrementorAddress: string;
}
export type SupportedChainAddedEvent = TypedEvent<
  [BigNumber, string],
  SupportedChainAddedEventObject
>;

export type SupportedChainAddedEventFilter =
  TypedEventFilter<SupportedChainAddedEvent>;

export interface SupportedChainRemovedEventObject {
  chainId: BigNumber;
}
export type SupportedChainRemovedEvent = TypedEvent<
  [BigNumber],
  SupportedChainRemovedEventObject
>;

export type SupportedChainRemovedEventFilter =
  TypedEventFilter<SupportedChainRemovedEvent>;

export interface ICrossChainCounter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICrossChainCounterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    receiveIncrementCommand(
      _amount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  receiveIncrementCommand(
    _amount: PromiseOrValue<BigNumberish>,
    _initiator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    receiveIncrementCommand(
      _amount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CounterIncremented(uint256,uint8,uint256,address)"(
      newCounterValue?: null,
      amount?: null,
      chainFrom?: null,
      initiator?: null
    ): CounterIncrementedEventFilter;
    CounterIncremented(
      newCounterValue?: null,
      amount?: null,
      chainFrom?: null,
      initiator?: null
    ): CounterIncrementedEventFilter;

    "SupportedChainAdded(uint256,bytes)"(
      chainId?: null,
      incrementorAddress?: null
    ): SupportedChainAddedEventFilter;
    SupportedChainAdded(
      chainId?: null,
      incrementorAddress?: null
    ): SupportedChainAddedEventFilter;

    "SupportedChainRemoved(uint256)"(
      chainId?: null
    ): SupportedChainRemovedEventFilter;
    SupportedChainRemoved(chainId?: null): SupportedChainRemovedEventFilter;
  };

  estimateGas: {
    receiveIncrementCommand(
      _amount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveIncrementCommand(
      _amount: PromiseOrValue<BigNumberish>,
      _initiator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
