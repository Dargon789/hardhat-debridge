/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ICallProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallProxy__factory>;
    getContractFactory(
      name: "IDeBridgeGate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeBridgeGate__factory>;
    getContractFactory(
      name: "IDeBridgeToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeBridgeToken__factory>;
    getContractFactory(
      name: "IDeBridgeTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeBridgeTokenDeployer__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IFlashCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashCallback__factory>;
    getContractFactory(
      name: "IOraclesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOraclesManager__factory>;
    getContractFactory(
      name: "ISignatureVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureVerifier__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWethGate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWethGate__factory>;
    getContractFactory(
      name: "Flags",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Flags__factory>;
    getContractFactory(
      name: "SignatureUtil",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureUtil__factory>;
    getContractFactory(
      name: "MockWeth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWeth__factory>;
    getContractFactory(
      name: "CallProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallProxy__factory>;
    getContractFactory(
      name: "DeBridgeGate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DeBridgeGate__factory>;
    getContractFactory(
      name: "OraclesManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OraclesManager__factory>;
    getContractFactory(
      name: "SignatureVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SignatureVerifier__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;

    getContractAt(
      name: "ICallProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallProxy>;
    getContractAt(
      name: "IDeBridgeGate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeBridgeGate>;
    getContractAt(
      name: "IDeBridgeToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeBridgeToken>;
    getContractAt(
      name: "IDeBridgeTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeBridgeTokenDeployer>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IFlashCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashCallback>;
    getContractAt(
      name: "IOraclesManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOraclesManager>;
    getContractAt(
      name: "ISignatureVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureVerifier>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWethGate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWethGate>;
    getContractAt(
      name: "Flags",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Flags>;
    getContractAt(
      name: "SignatureUtil",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureUtil>;
    getContractAt(
      name: "MockWeth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWeth>;
    getContractAt(
      name: "CallProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallProxy>;
    getContractAt(
      name: "DeBridgeGate",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DeBridgeGate>;
    getContractAt(
      name: "OraclesManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OraclesManager>;
    getContractAt(
      name: "SignatureVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SignatureVerifier>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
