/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockSignatureVerifier,
  MockSignatureVerifierInterface,
} from "../../contracts/MockSignatureVerifier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "submissionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "Confirmed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "deployId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "DeployConfirmed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610172806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063965d0a6414610030575b600080fd5b61004361003e36600461005b565b505050565b005b803560ff8116811461005657600080fd5b919050565b60008060006060848603121561007057600080fd5b83359250602084013567ffffffffffffffff8082111561008f57600080fd5b818601915086601f8301126100a357600080fd5b8135818111156100b5576100b5610126565b604051601f8201601f19908116603f011681019083821181831017156100dd576100dd610126565b816040528281528960208487010111156100f657600080fd5b82602086016020830137600060208483010152809650505050505061011d60408501610045565b90509250925092565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220dc706b926787088e58ef7d7dd07ee209573c8450bab9a52841b48f449f33afe064736f6c63430008070033";

type MockSignatureVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSignatureVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSignatureVerifier__factory extends ContractFactory {
  constructor(...args: MockSignatureVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSignatureVerifier> {
    return super.deploy(overrides || {}) as Promise<MockSignatureVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSignatureVerifier {
    return super.attach(address) as MockSignatureVerifier;
  }
  override connect(signer: Signer): MockSignatureVerifier__factory {
    return super.connect(signer) as MockSignatureVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSignatureVerifierInterface {
    return new utils.Interface(_abi) as MockSignatureVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSignatureVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSignatureVerifier;
  }
}
