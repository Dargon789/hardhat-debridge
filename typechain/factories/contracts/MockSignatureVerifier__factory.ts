/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MockSignatureVerifier,
  MockSignatureVerifierInterface,
} from "../../contracts/MockSignatureVerifier";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "submissionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "Confirmed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "deployId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "DeployConfirmed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063965d0a6414610030575b600080fd5b61004a600480360381019061004591906100eb565b61004c565b005b505050565b600061006461005f8461017f565b61015a565b9050828152602081018484840111156100805761007f61023b565b5b61008b8482856101c7565b509392505050565b6000813590506100a28161025b565b92915050565b600082601f8301126100bd576100bc610236565b5b81356100cd848260208601610051565b91505092915050565b6000813590506100e581610272565b92915050565b60008060006060848603121561010457610103610245565b5b600061011286828701610093565b935050602084013567ffffffffffffffff81111561013357610132610240565b5b61013f868287016100a8565b9250506040610150868287016100d6565b9150509250925092565b6000610164610175565b905061017082826101d6565b919050565b6000604051905090565b600067ffffffffffffffff82111561019a57610199610207565b5b6101a38261024a565b9050602081019050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b6101df8261024a565b810181811067ffffffffffffffff821117156101fe576101fd610207565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610264816101b0565b811461026f57600080fd5b50565b61027b816101ba565b811461028657600080fd5b5056fea26469706673582212208a6c6837d94d2799ebb4639beb20bb631a5be0f6aa5a36472ca2dde2d9a9393f64736f6c63430008070033";

type MockSignatureVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSignatureVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSignatureVerifier__factory extends ContractFactory {
  constructor(...args: MockSignatureVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockSignatureVerifier> {
    return super.deploy(overrides || {}) as Promise<MockSignatureVerifier>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockSignatureVerifier {
    return super.attach(address) as MockSignatureVerifier;
  }
  override connect(signer: Signer): MockSignatureVerifier__factory {
    return super.connect(signer) as MockSignatureVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSignatureVerifierInterface {
    return new utils.Interface(_abi) as MockSignatureVerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockSignatureVerifier {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockSignatureVerifier;
  }
}
