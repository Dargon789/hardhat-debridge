/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IOraclesManagerInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "AddOracle(address,bool)": EventFragment;
    "DeployApproved(bytes32)": EventFragment;
    "SubmissionApproved(bytes32)": EventFragment;
    "UpdateOracle(address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmissionApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOracle"): EventFragment;
}

export type AddOracleEvent = TypedEvent<
  [string, boolean] & { oracle: string; required: boolean }
>;

export type DeployApprovedEvent = TypedEvent<[string] & { deployId: string }>;

export type SubmissionApprovedEvent = TypedEvent<
  [string] & { submissionId: string }
>;

export type UpdateOracleEvent = TypedEvent<
  [string, boolean, boolean] & {
    oracle: string;
    required: boolean;
    isValid: boolean;
  }
>;

export class IOraclesManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOraclesManagerInterface;

  functions: {};

  callStatic: {};

  filters: {
    "AddOracle(address,bool)"(
      oracle?: null,
      required?: null
    ): TypedEventFilter<
      [string, boolean],
      { oracle: string; required: boolean }
    >;

    AddOracle(
      oracle?: null,
      required?: null
    ): TypedEventFilter<
      [string, boolean],
      { oracle: string; required: boolean }
    >;

    "DeployApproved(bytes32)"(
      deployId?: null
    ): TypedEventFilter<[string], { deployId: string }>;

    DeployApproved(
      deployId?: null
    ): TypedEventFilter<[string], { deployId: string }>;

    "SubmissionApproved(bytes32)"(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    SubmissionApproved(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    "UpdateOracle(address,bool,bool)"(
      oracle?: null,
      required?: null,
      isValid?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { oracle: string; required: boolean; isValid: boolean }
    >;

    UpdateOracle(
      oracle?: null,
      required?: null,
      isValid?: null
    ): TypedEventFilter<
      [string, boolean, boolean],
      { oracle: string; required: boolean; isValid: boolean }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
