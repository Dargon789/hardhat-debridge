/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IDeBridgeGate {
  export type ChainSupportInfoStruct = {
    fixedNativeFee: PromiseOrValue<BigNumberish>;
    isSupported: PromiseOrValue<boolean>;
    transferFeeBps: PromiseOrValue<BigNumberish>;
  };

  export type ChainSupportInfoStructOutput = [BigNumber, boolean, number] & {
    fixedNativeFee: BigNumber;
    isSupported: boolean;
    transferFeeBps: number;
  };

  export type FeeParamsStruct = {
    receivedAmount: PromiseOrValue<BigNumberish>;
    fixFee: PromiseOrValue<BigNumberish>;
    transferFee: PromiseOrValue<BigNumberish>;
    useAssetFee: PromiseOrValue<boolean>;
    isNativeToken: PromiseOrValue<boolean>;
  };

  export type FeeParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    receivedAmount: BigNumber;
    fixFee: BigNumber;
    transferFee: BigNumber;
    useAssetFee: boolean;
    isNativeToken: boolean;
  };

  export type SubmissionAutoParamsFromStruct = {
    executionFee: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
    fallbackAddress: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    nativeSender: PromiseOrValue<BytesLike>;
  };

  export type SubmissionAutoParamsFromStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    executionFee: BigNumber;
    flags: BigNumber;
    fallbackAddress: string;
    data: string;
    nativeSender: string;
  };
}

export interface DeBridgeGateInterface extends utils.Interface {
  functions: {
    "BPS_DENOMINATOR()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DEPLOY_PREFIX()": FunctionFragment;
    "GOVMONITORING_ROLE()": FunctionFragment;
    "SUBMISSION_PREFIX()": FunctionFragment;
    "autoUpdateFixedNativeFee(uint256)": FunctionFragment;
    "blockSubmission(bytes32[],bool)": FunctionFragment;
    "callProxy()": FunctionFragment;
    "claim(bytes32,uint256,uint256,address,uint256,bytes,bytes)": FunctionFragment;
    "deBridgeTokenDeployer()": FunctionFragment;
    "defiController()": FunctionFragment;
    "deployNewAsset(bytes,uint256,string,string,uint8,bytes)": FunctionFragment;
    "excessConfirmations()": FunctionFragment;
    "feeContractUpdater()": FunctionFragment;
    "feeDiscount(address)": FunctionFragment;
    "feeProxy()": FunctionFragment;
    "flash(address,address,uint256,bytes)": FunctionFragment;
    "flashFeeBps()": FunctionFragment;
    "getAmountThreshold(bytes32)": FunctionFragment;
    "getChainFromConfig(uint256)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getChainToConfig(uint256)": FunctionFragment;
    "getDebridge(bytes32)": FunctionFragment;
    "getDebridgeChainAssetFixedFee(bytes32,uint256)": FunctionFragment;
    "getDebridgeFeeInfo(bytes32)": FunctionFragment;
    "getDebridgeId(uint256,address)": FunctionFragment;
    "getDefiAvaliableReserves(address)": FunctionFragment;
    "getDeployId(bytes32,string,string,uint8)": FunctionFragment;
    "getNativeInfo(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSubmissionIdFrom(bytes32,uint256,uint256,address,uint256,(uint256,uint256,address,bytes,bytes),bool,address)": FunctionFragment;
    "getbDebridgeId(uint256,bytes)": FunctionFragment;
    "globalFixedNativeFee()": FunctionFragment;
    "globalTransferFeeBps()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(uint8,address)": FunctionFragment;
    "isBlockedSubmission(bytes32)": FunctionFragment;
    "isSubmissionUsed(bytes32)": FunctionFragment;
    "lockedClaim()": FunctionFragment;
    "nonce()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestReserves(address,uint256)": FunctionFragment;
    "returnReserves(address,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "send(address,uint256,uint256,bytes,bytes,bool,uint32,bytes)": FunctionFragment;
    "setCallProxy(address)": FunctionFragment;
    "setChainSupport(uint256,bool,bool)": FunctionFragment;
    "setDeBridgeTokenDeployer(address)": FunctionFragment;
    "setDefiController(address)": FunctionFragment;
    "setFeeContractUpdater(address)": FunctionFragment;
    "setFeeProxy(address)": FunctionFragment;
    "setSignatureVerifier(address)": FunctionFragment;
    "setWethGate(address)": FunctionFragment;
    "signatureVerifier()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAsset(bytes32,uint256,uint16,uint256)": FunctionFragment;
    "updateAssetFixedFees(bytes32,uint256[],uint256[])": FunctionFragment;
    "updateChainSupport(uint256[],(uint256,bool,uint16)[],bool)": FunctionFragment;
    "updateExcessConfirmations(uint8)": FunctionFragment;
    "updateFeeDiscount(address,uint16,uint16)": FunctionFragment;
    "updateFlashFee(uint256)": FunctionFragment;
    "updateGlobalFee(uint256,uint16)": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "wethGate()": FunctionFragment;
    "withdrawFee(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BPS_DENOMINATOR"
      | "DEFAULT_ADMIN_ROLE"
      | "DEPLOY_PREFIX"
      | "GOVMONITORING_ROLE"
      | "SUBMISSION_PREFIX"
      | "autoUpdateFixedNativeFee"
      | "blockSubmission"
      | "callProxy"
      | "claim"
      | "deBridgeTokenDeployer"
      | "defiController"
      | "deployNewAsset"
      | "excessConfirmations"
      | "feeContractUpdater"
      | "feeDiscount"
      | "feeProxy"
      | "flash"
      | "flashFeeBps"
      | "getAmountThreshold"
      | "getChainFromConfig"
      | "getChainId"
      | "getChainToConfig"
      | "getDebridge"
      | "getDebridgeChainAssetFixedFee"
      | "getDebridgeFeeInfo"
      | "getDebridgeId"
      | "getDefiAvaliableReserves"
      | "getDeployId"
      | "getNativeInfo"
      | "getRoleAdmin"
      | "getSubmissionIdFrom"
      | "getbDebridgeId"
      | "globalFixedNativeFee"
      | "globalTransferFeeBps"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isBlockedSubmission"
      | "isSubmissionUsed"
      | "lockedClaim"
      | "nonce"
      | "pause"
      | "paused"
      | "renounceRole"
      | "requestReserves"
      | "returnReserves"
      | "revokeRole"
      | "send"
      | "setCallProxy"
      | "setChainSupport"
      | "setDeBridgeTokenDeployer"
      | "setDefiController"
      | "setFeeContractUpdater"
      | "setFeeProxy"
      | "setSignatureVerifier"
      | "setWethGate"
      | "signatureVerifier"
      | "supportsInterface"
      | "unpause"
      | "updateAsset"
      | "updateAssetFixedFees"
      | "updateChainSupport"
      | "updateExcessConfirmations"
      | "updateFeeDiscount"
      | "updateFlashFee"
      | "updateGlobalFee"
      | "version"
      | "weth"
      | "wethGate"
      | "withdrawFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BPS_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEPLOY_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVMONITORING_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "autoUpdateFixedNativeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockSubmission",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "callProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deBridgeTokenDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defiController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployNewAsset",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "excessConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeContractUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeDiscount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountThreshold",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainFromConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainToConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridge",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeChainAssetFixedFee",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeFeeInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiAvaliableReserves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployId",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmissionIdFrom",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IDeBridgeGate.SubmissionAutoParamsFromStruct,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getbDebridgeId",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFixedNativeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalTransferFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlockedSubmission",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionUsed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedClaim",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReserves",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "returnReserves",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallProxy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainSupport",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeBridgeTokenDeployer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefiController",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeContractUpdater",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeProxy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSignatureVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWethGate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAsset",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAssetFixedFees",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateChainSupport",
    values: [
      PromiseOrValue<BigNumberish>[],
      IDeBridgeGate.ChainSupportInfoStruct[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExcessConfirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeDiscount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateGlobalFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "wethGate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEPLOY_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVMONITORING_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "autoUpdateFixedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deBridgeTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defiController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNewAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "excessConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeContractUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainFromConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainToConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeChainAssetFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiAvaliableReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmissionIdFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getbDebridgeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFixedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalTransferFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlockedSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeBridgeTokenDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefiController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeContractUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSignatureVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWethGate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAssetFixedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateChainSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExcessConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGlobalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wethGate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AutoRequestExecuted(bytes32,bool,address)": EventFragment;
    "Blocked(bytes32)": EventFragment;
    "CallProxyUpdated(address)": EventFragment;
    "ChainSupportUpdated(uint256,bool,bool)": EventFragment;
    "ChainsSupportUpdated(uint256,tuple,bool)": EventFragment;
    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)": EventFragment;
    "FixedNativeFeeAutoUpdated(uint256)": EventFragment;
    "FixedNativeFeeUpdated(uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MonitoringClaimEvent(bytes32,uint256,uint256)": EventFragment;
    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)": EventFragment;
    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)": EventFragment;
    "Unblocked(bytes32)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawnFee(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoRequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainsSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeAutoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringSendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unblocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFee"): EventFragment;
}

export interface AutoRequestExecutedEventObject {
  submissionId: string;
  success: boolean;
  callProxy: string;
}
export type AutoRequestExecutedEvent = TypedEvent<
  [string, boolean, string],
  AutoRequestExecutedEventObject
>;

export type AutoRequestExecutedEventFilter =
  TypedEventFilter<AutoRequestExecutedEvent>;

export interface BlockedEventObject {
  submissionId: string;
}
export type BlockedEvent = TypedEvent<[string], BlockedEventObject>;

export type BlockedEventFilter = TypedEventFilter<BlockedEvent>;

export interface CallProxyUpdatedEventObject {
  callProxy: string;
}
export type CallProxyUpdatedEvent = TypedEvent<
  [string],
  CallProxyUpdatedEventObject
>;

export type CallProxyUpdatedEventFilter =
  TypedEventFilter<CallProxyUpdatedEvent>;

export interface ChainSupportUpdatedEventObject {
  chainId: BigNumber;
  isSupported: boolean;
  isChainFrom: boolean;
}
export type ChainSupportUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean],
  ChainSupportUpdatedEventObject
>;

export type ChainSupportUpdatedEventFilter =
  TypedEventFilter<ChainSupportUpdatedEvent>;

export interface ChainsSupportUpdatedEventObject {
  chainIds: BigNumber;
  chainSupportInfo: IDeBridgeGate.ChainSupportInfoStructOutput;
  isChainFrom: boolean;
}
export type ChainsSupportUpdatedEvent = TypedEvent<
  [BigNumber, IDeBridgeGate.ChainSupportInfoStructOutput, boolean],
  ChainsSupportUpdatedEventObject
>;

export type ChainsSupportUpdatedEventFilter =
  TypedEventFilter<ChainsSupportUpdatedEvent>;

export interface ClaimedEventObject {
  submissionId: string;
  debridgeId: string;
  amount: BigNumber;
  receiver: string;
  nonce: BigNumber;
  chainIdFrom: BigNumber;
  autoParams: string;
  isNativeToken: boolean;
}
export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, boolean],
  ClaimedEventObject
>;

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>;

export interface FixedNativeFeeAutoUpdatedEventObject {
  globalFixedNativeFee: BigNumber;
}
export type FixedNativeFeeAutoUpdatedEvent = TypedEvent<
  [BigNumber],
  FixedNativeFeeAutoUpdatedEventObject
>;

export type FixedNativeFeeAutoUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeAutoUpdatedEvent>;

export interface FixedNativeFeeUpdatedEventObject {
  globalFixedNativeFee: BigNumber;
  globalTransferFeeBps: BigNumber;
}
export type FixedNativeFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FixedNativeFeeUpdatedEventObject
>;

export type FixedNativeFeeUpdatedEventFilter =
  TypedEventFilter<FixedNativeFeeUpdatedEvent>;

export interface FlashEventObject {
  sender: string;
  tokenAddress: string;
  receiver: string;
  amount: BigNumber;
  paid: BigNumber;
}
export type FlashEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  FlashEventObject
>;

export type FlashEventFilter = TypedEventFilter<FlashEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MonitoringClaimEventEventObject {
  submissionId: string;
  lockedOrMintedAmount: BigNumber;
  totalSupply: BigNumber;
}
export type MonitoringClaimEventEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MonitoringClaimEventEventObject
>;

export type MonitoringClaimEventEventFilter =
  TypedEventFilter<MonitoringClaimEventEvent>;

export interface MonitoringSendEventEventObject {
  submissionId: string;
  nonce: BigNumber;
  lockedOrMintedAmount: BigNumber;
  totalSupply: BigNumber;
}
export type MonitoringSendEventEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  MonitoringSendEventEventObject
>;

export type MonitoringSendEventEventFilter =
  TypedEventFilter<MonitoringSendEventEvent>;

export interface PairAddedEventObject {
  debridgeId: string;
  tokenAddress: string;
  nativeAddress: string;
  nativeChainId: BigNumber;
  maxAmount: BigNumber;
  minReservesBps: number;
}
export type PairAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number],
  PairAddedEventObject
>;

export type PairAddedEventFilter = TypedEventFilter<PairAddedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SentEventObject {
  submissionId: string;
  debridgeId: string;
  amount: BigNumber;
  receiver: string;
  nonce: BigNumber;
  chainIdTo: BigNumber;
  referralCode: number;
  feeParams: IDeBridgeGate.FeeParamsStructOutput;
  autoParams: string;
  nativeSender: string;
}
export type SentEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    IDeBridgeGate.FeeParamsStructOutput,
    string,
    string
  ],
  SentEventObject
>;

export type SentEventFilter = TypedEventFilter<SentEvent>;

export interface UnblockedEventObject {
  submissionId: string;
}
export type UnblockedEvent = TypedEvent<[string], UnblockedEventObject>;

export type UnblockedEventFilter = TypedEventFilter<UnblockedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawnFeeEventObject {
  debridgeId: string;
  fee: BigNumber;
}
export type WithdrawnFeeEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnFeeEventObject
>;

export type WithdrawnFeeEventFilter = TypedEventFilter<WithdrawnFeeEvent>;

export interface DeBridgeGate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeBridgeGateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<[BigNumber]>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockSubmission(
      _submissionIds: PromiseOrValue<BytesLike>[],
      isBlocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callProxy(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _debridgeId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<[string]>;

    defiController(overrides?: CallOverrides): Promise<[string]>;

    deployNewAsset(
      _nativeTokenAddress: PromiseOrValue<BytesLike>,
      _nativeChainId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    excessConfirmations(overrides?: CallOverrides): Promise<[number]>;

    feeContractUpdater(overrides?: CallOverrides): Promise<[string]>;

    feeDiscount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { discountFixBps: number; discountTransferBps: number }
    >;

    feeProxy(overrides?: CallOverrides): Promise<[string]>;

    flash(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountThreshold(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getChainFromConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getChainId(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cid: BigNumber }>;

    getChainToConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getDebridge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
        chainId: BigNumber;
        maxAmount: BigNumber;
        balance: BigNumber;
        lockedInStrategies: BigNumber;
        tokenAddress: string;
        minReservesBps: number;
        exist: boolean;
      }
    >;

    getDebridgeChainAssetFixedFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDebridgeFeeInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectedFees: BigNumber;
        withdrawnFees: BigNumber;
      }
    >;

    getDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDefiAvaliableReserves(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDeployId(
      _debridgeId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNativeInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSubmissionIdFrom(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _autoParams: IDeBridgeGate.SubmissionAutoParamsFromStruct,
      _hasAutoParams: PromiseOrValue<boolean>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getbDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<[number]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isBlockedSubmission(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSubmissionUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockedClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    send(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdTo: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<BytesLike>,
      _permit: PromiseOrValue<BytesLike>,
      _useAssetFee: PromiseOrValue<boolean>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallProxy(
      _callProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChainSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _isSupported: PromiseOrValue<boolean>,
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefiController(
      _defiController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeContractUpdater(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeProxy(
      _feeProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSignatureVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWethGate(
      _wethGate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signatureVerifier(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAsset(
      _debridgeId: PromiseOrValue<BytesLike>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _minReservesBps: PromiseOrValue<BigNumberish>,
      _amountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAssetFixedFees(
      _debridgeId: PromiseOrValue<BytesLike>,
      _supportedChainIds: PromiseOrValue<BigNumberish>[],
      _assetFeesInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateChainSupport(
      _chainIds: PromiseOrValue<BigNumberish>[],
      _chainSupportInfo: IDeBridgeGate.ChainSupportInfoStruct[],
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExcessConfirmations(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeDiscount(
      _address: PromiseOrValue<string>,
      _discountFixBps: PromiseOrValue<BigNumberish>,
      _discountTransferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFlashFee(
      _flashFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateGlobalFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      _globalTransferFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wethGate(overrides?: CallOverrides): Promise<[string]>;

    withdrawFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

  GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<string>;

  SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

  autoUpdateFixedNativeFee(
    _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockSubmission(
    _submissionIds: PromiseOrValue<BytesLike>[],
    isBlocked: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callProxy(overrides?: CallOverrides): Promise<string>;

  claim(
    _debridgeId: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _chainIdFrom: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    _signatures: PromiseOrValue<BytesLike>,
    _autoParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deBridgeTokenDeployer(overrides?: CallOverrides): Promise<string>;

  defiController(overrides?: CallOverrides): Promise<string>;

  deployNewAsset(
    _nativeTokenAddress: PromiseOrValue<BytesLike>,
    _nativeChainId: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    _signatures: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  excessConfirmations(overrides?: CallOverrides): Promise<number>;

  feeContractUpdater(overrides?: CallOverrides): Promise<string>;

  feeDiscount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, number] & { discountFixBps: number; discountTransferBps: number }
  >;

  feeProxy(overrides?: CallOverrides): Promise<string>;

  flash(
    _tokenAddress: PromiseOrValue<string>,
    _receiver: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountThreshold(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChainFromConfig(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    }
  >;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getChainToConfig(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    }
  >;

  getDebridge(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
      chainId: BigNumber;
      maxAmount: BigNumber;
      balance: BigNumber;
      lockedInStrategies: BigNumber;
      tokenAddress: string;
      minReservesBps: number;
      exist: boolean;
    }
  >;

  getDebridgeChainAssetFixedFee(
    _debridgeId: PromiseOrValue<BytesLike>,
    _chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDebridgeFeeInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      collectedFees: BigNumber;
      withdrawnFees: BigNumber;
    }
  >;

  getDebridgeId(
    _chainId: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDefiAvaliableReserves(
    _tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDeployId(
    _debridgeId: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNativeInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
  >;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubmissionIdFrom(
    _debridgeId: PromiseOrValue<BytesLike>,
    _chainIdFrom: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    _nonce: PromiseOrValue<BigNumberish>,
    _autoParams: IDeBridgeGate.SubmissionAutoParamsFromStruct,
    _hasAutoParams: PromiseOrValue<boolean>,
    _sender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getbDebridgeId(
    _chainId: PromiseOrValue<BigNumberish>,
    _tokenAddress: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

  globalTransferFeeBps(overrides?: CallOverrides): Promise<number>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _excessConfirmations: PromiseOrValue<BigNumberish>,
    _weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isBlockedSubmission(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubmissionUsed(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestReserves(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnReserves(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  send(
    _tokenAddress: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _chainIdTo: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<BytesLike>,
    _permit: PromiseOrValue<BytesLike>,
    _useAssetFee: PromiseOrValue<boolean>,
    _referralCode: PromiseOrValue<BigNumberish>,
    _autoParams: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallProxy(
    _callProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChainSupport(
    _chainId: PromiseOrValue<BigNumberish>,
    _isSupported: PromiseOrValue<boolean>,
    _isChainFrom: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDeBridgeTokenDeployer(
    _deBridgeTokenDeployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefiController(
    _defiController: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeContractUpdater(
    _value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeProxy(
    _feeProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSignatureVerifier(
    _verifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWethGate(
    _wethGate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signatureVerifier(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAsset(
    _debridgeId: PromiseOrValue<BytesLike>,
    _maxAmount: PromiseOrValue<BigNumberish>,
    _minReservesBps: PromiseOrValue<BigNumberish>,
    _amountThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAssetFixedFees(
    _debridgeId: PromiseOrValue<BytesLike>,
    _supportedChainIds: PromiseOrValue<BigNumberish>[],
    _assetFeesInfo: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateChainSupport(
    _chainIds: PromiseOrValue<BigNumberish>[],
    _chainSupportInfo: IDeBridgeGate.ChainSupportInfoStruct[],
    _isChainFrom: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExcessConfirmations(
    _excessConfirmations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeDiscount(
    _address: PromiseOrValue<string>,
    _discountFixBps: PromiseOrValue<BigNumberish>,
    _discountTransferBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFlashFee(
    _flashFeeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateGlobalFee(
    _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
    _globalTransferFeeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  wethGate(overrides?: CallOverrides): Promise<string>;

  withdrawFee(
    _debridgeId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<string>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    blockSubmission(
      _submissionIds: PromiseOrValue<BytesLike>[],
      isBlocked: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    callProxy(overrides?: CallOverrides): Promise<string>;

    claim(
      _debridgeId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<string>;

    defiController(overrides?: CallOverrides): Promise<string>;

    deployNewAsset(
      _nativeTokenAddress: PromiseOrValue<BytesLike>,
      _nativeChainId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    excessConfirmations(overrides?: CallOverrides): Promise<number>;

    feeContractUpdater(overrides?: CallOverrides): Promise<string>;

    feeDiscount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, number] & { discountFixBps: number; discountTransferBps: number }
    >;

    feeProxy(overrides?: CallOverrides): Promise<string>;

    flash(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountThreshold(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainFromConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainToConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, number] & {
        fixedNativeFee: BigNumber;
        isSupported: boolean;
        transferFeeBps: number;
      }
    >;

    getDebridge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, number, boolean] & {
        chainId: BigNumber;
        maxAmount: BigNumber;
        balance: BigNumber;
        lockedInStrategies: BigNumber;
        tokenAddress: string;
        minReservesBps: number;
        exist: boolean;
      }
    >;

    getDebridgeChainAssetFixedFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeFeeInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        collectedFees: BigNumber;
        withdrawnFees: BigNumber;
      }
    >;

    getDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDefiAvaliableReserves(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployId(
      _debridgeId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNativeInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubmissionIdFrom(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _autoParams: IDeBridgeGate.SubmissionAutoParamsFromStruct,
      _hasAutoParams: PromiseOrValue<boolean>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getbDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<number>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      _weth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isBlockedSubmission(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubmissionUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    returnReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdTo: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<BytesLike>,
      _permit: PromiseOrValue<BytesLike>,
      _useAssetFee: PromiseOrValue<boolean>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallProxy(
      _callProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _isSupported: PromiseOrValue<boolean>,
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefiController(
      _defiController: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeContractUpdater(
      _value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeProxy(
      _feeProxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSignatureVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWethGate(
      _wethGate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureVerifier(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAsset(
      _debridgeId: PromiseOrValue<BytesLike>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _minReservesBps: PromiseOrValue<BigNumberish>,
      _amountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAssetFixedFees(
      _debridgeId: PromiseOrValue<BytesLike>,
      _supportedChainIds: PromiseOrValue<BigNumberish>[],
      _assetFeesInfo: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateChainSupport(
      _chainIds: PromiseOrValue<BigNumberish>[],
      _chainSupportInfo: IDeBridgeGate.ChainSupportInfoStruct[],
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExcessConfirmations(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeDiscount(
      _address: PromiseOrValue<string>,
      _discountFixBps: PromiseOrValue<BigNumberish>,
      _discountTransferBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlashFee(
      _flashFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateGlobalFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      _globalTransferFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    wethGate(overrides?: CallOverrides): Promise<string>;

    withdrawFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutoRequestExecuted(bytes32,bool,address)"(
      submissionId?: null,
      success?: PromiseOrValue<boolean> | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;
    AutoRequestExecuted(
      submissionId?: null,
      success?: PromiseOrValue<boolean> | null,
      callProxy?: null
    ): AutoRequestExecutedEventFilter;

    "Blocked(bytes32)"(submissionId?: null): BlockedEventFilter;
    Blocked(submissionId?: null): BlockedEventFilter;

    "CallProxyUpdated(address)"(callProxy?: null): CallProxyUpdatedEventFilter;
    CallProxyUpdated(callProxy?: null): CallProxyUpdatedEventFilter;

    "ChainSupportUpdated(uint256,bool,bool)"(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;
    ChainSupportUpdated(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): ChainSupportUpdatedEventFilter;

    "ChainsSupportUpdated(uint256,tuple,bool)"(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;
    ChainsSupportUpdated(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): ChainsSupportUpdatedEventFilter;

    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)"(
      submissionId?: null,
      debridgeId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      receiver?: PromiseOrValue<string> | null,
      nonce?: null,
      chainIdFrom?: PromiseOrValue<BigNumberish> | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;
    Claimed(
      submissionId?: null,
      debridgeId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      receiver?: PromiseOrValue<string> | null,
      nonce?: null,
      chainIdFrom?: PromiseOrValue<BigNumberish> | null,
      autoParams?: null,
      isNativeToken?: null
    ): ClaimedEventFilter;

    "FixedNativeFeeAutoUpdated(uint256)"(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;
    FixedNativeFeeAutoUpdated(
      globalFixedNativeFee?: null
    ): FixedNativeFeeAutoUpdatedEventFilter;

    "FixedNativeFeeUpdated(uint256,uint256)"(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;
    FixedNativeFeeUpdated(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): FixedNativeFeeUpdatedEventFilter;

    "Flash(address,address,address,uint256,uint256)"(
      sender?: null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;
    Flash(
      sender?: null,
      tokenAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null,
      paid?: null
    ): FlashEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MonitoringClaimEvent(bytes32,uint256,uint256)"(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;
    MonitoringClaimEvent(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringClaimEventEventFilter;

    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)"(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;
    MonitoringSendEvent(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): MonitoringSendEventEventFilter;

    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)"(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: PromiseOrValue<BigNumberish> | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;
    PairAdded(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: PromiseOrValue<BigNumberish> | null,
      maxAmount?: null,
      minReservesBps?: null
    ): PairAddedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)"(
      submissionId?: null,
      debridgeId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: PromiseOrValue<BigNumberish> | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;
    Sent(
      submissionId?: null,
      debridgeId?: PromiseOrValue<BytesLike> | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: PromiseOrValue<BigNumberish> | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): SentEventFilter;

    "Unblocked(bytes32)"(submissionId?: null): UnblockedEventFilter;
    Unblocked(submissionId?: null): UnblockedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawnFee(bytes32,uint256)"(
      debridgeId?: null,
      fee?: null
    ): WithdrawnFeeEventFilter;
    WithdrawnFee(debridgeId?: null, fee?: null): WithdrawnFeeEventFilter;
  };

  estimateGas: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    GOVMONITORING_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockSubmission(
      _submissionIds: PromiseOrValue<BytesLike>[],
      isBlocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callProxy(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _debridgeId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deBridgeTokenDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    defiController(overrides?: CallOverrides): Promise<BigNumber>;

    deployNewAsset(
      _nativeTokenAddress: PromiseOrValue<BytesLike>,
      _nativeChainId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    excessConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    feeContractUpdater(overrides?: CallOverrides): Promise<BigNumber>;

    feeDiscount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeProxy(overrides?: CallOverrides): Promise<BigNumber>;

    flash(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flashFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountThreshold(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainFromConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getChainToConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeFeeInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeployId(
      _debridgeId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmissionIdFrom(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _autoParams: IDeBridgeGate.SubmissionAutoParamsFromStruct,
      _hasAutoParams: PromiseOrValue<boolean>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getbDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isBlockedSubmission(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubmissionUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedClaim(overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    send(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdTo: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<BytesLike>,
      _permit: PromiseOrValue<BytesLike>,
      _useAssetFee: PromiseOrValue<boolean>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallProxy(
      _callProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChainSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _isSupported: PromiseOrValue<boolean>,
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefiController(
      _defiController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeContractUpdater(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeProxy(
      _feeProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSignatureVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWethGate(
      _wethGate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signatureVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAsset(
      _debridgeId: PromiseOrValue<BytesLike>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _minReservesBps: PromiseOrValue<BigNumberish>,
      _amountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAssetFixedFees(
      _debridgeId: PromiseOrValue<BytesLike>,
      _supportedChainIds: PromiseOrValue<BigNumberish>[],
      _assetFeesInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateChainSupport(
      _chainIds: PromiseOrValue<BigNumberish>[],
      _chainSupportInfo: IDeBridgeGate.ChainSupportInfoStruct[],
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExcessConfirmations(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeDiscount(
      _address: PromiseOrValue<string>,
      _discountFixBps: PromiseOrValue<BigNumberish>,
      _discountTransferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFlashFee(
      _flashFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateGlobalFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      _globalTransferFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wethGate(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEPLOY_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GOVMONITORING_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUBMISSION_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    autoUpdateFixedNativeFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockSubmission(
      _submissionIds: PromiseOrValue<BytesLike>[],
      isBlocked: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _debridgeId: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deBridgeTokenDeployer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defiController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployNewAsset(
      _nativeTokenAddress: PromiseOrValue<BytesLike>,
      _nativeChainId: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      _signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    excessConfirmations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeContractUpdater(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeDiscount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flash(
      _tokenAddress: PromiseOrValue<string>,
      _receiver: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flashFeeBps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountThreshold(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainFromConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChainToConfig(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridge(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeFeeInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiAvaliableReserves(
      _tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeployId(
      _debridgeId: PromiseOrValue<BytesLike>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmissionIdFrom(
      _debridgeId: PromiseOrValue<BytesLike>,
      _chainIdFrom: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      _nonce: PromiseOrValue<BigNumberish>,
      _autoParams: IDeBridgeGate.SubmissionAutoParamsFromStruct,
      _hasAutoParams: PromiseOrValue<boolean>,
      _sender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getbDebridgeId(
      _chainId: PromiseOrValue<BigNumberish>,
      _tokenAddress: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalFixedNativeFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalTransferFeeBps(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      _weth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isBlockedSubmission(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubmissionUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnReserves(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _tokenAddress: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _chainIdTo: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<BytesLike>,
      _permit: PromiseOrValue<BytesLike>,
      _useAssetFee: PromiseOrValue<boolean>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _autoParams: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallProxy(
      _callProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChainSupport(
      _chainId: PromiseOrValue<BigNumberish>,
      _isSupported: PromiseOrValue<boolean>,
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDeBridgeTokenDeployer(
      _deBridgeTokenDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefiController(
      _defiController: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeContractUpdater(
      _value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeProxy(
      _feeProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSignatureVerifier(
      _verifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWethGate(
      _wethGate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signatureVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAsset(
      _debridgeId: PromiseOrValue<BytesLike>,
      _maxAmount: PromiseOrValue<BigNumberish>,
      _minReservesBps: PromiseOrValue<BigNumberish>,
      _amountThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAssetFixedFees(
      _debridgeId: PromiseOrValue<BytesLike>,
      _supportedChainIds: PromiseOrValue<BigNumberish>[],
      _assetFeesInfo: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateChainSupport(
      _chainIds: PromiseOrValue<BigNumberish>[],
      _chainSupportInfo: IDeBridgeGate.ChainSupportInfoStruct[],
      _isChainFrom: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExcessConfirmations(
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeDiscount(
      _address: PromiseOrValue<string>,
      _discountFixBps: PromiseOrValue<BigNumberish>,
      _discountTransferBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashFee(
      _flashFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateGlobalFee(
      _globalFixedNativeFee: PromiseOrValue<BigNumberish>,
      _globalTransferFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethGate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFee(
      _debridgeId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
