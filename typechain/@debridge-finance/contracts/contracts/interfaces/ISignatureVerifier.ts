/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface ISignatureVerifierInterface extends utils.Interface {
  functions: {
    "submit(bytes32,bytes,uint8)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "submit"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "submit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;

  events: {
    "Confirmed(bytes32,address)": EventFragment;
    "DeployConfirmed(bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Confirmed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeployConfirmed"): EventFragment;
}

export interface ConfirmedEventObject {
  submissionId: string;
  operator: string;
}
export type ConfirmedEvent = TypedEvent<[string, string], ConfirmedEventObject>;

export type ConfirmedEventFilter = TypedEventFilter<ConfirmedEvent>;

export interface DeployConfirmedEventObject {
  deployId: string;
  operator: string;
}
export type DeployConfirmedEvent = TypedEvent<
  [string, string],
  DeployConfirmedEventObject
>;

export type DeployConfirmedEventFilter = TypedEventFilter<DeployConfirmedEvent>;

export interface ISignatureVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISignatureVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    submit(
      _submissionId: PromiseOrValue<BytesLike>,
      _signatures: PromiseOrValue<BytesLike>,
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  submit(
    _submissionId: PromiseOrValue<BytesLike>,
    _signatures: PromiseOrValue<BytesLike>,
    _excessConfirmations: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    submit(
      _submissionId: PromiseOrValue<BytesLike>,
      _signatures: PromiseOrValue<BytesLike>,
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Confirmed(bytes32,address)"(
      submissionId?: null,
      operator?: null
    ): ConfirmedEventFilter;
    Confirmed(submissionId?: null, operator?: null): ConfirmedEventFilter;

    "DeployConfirmed(bytes32,address)"(
      deployId?: null,
      operator?: null
    ): DeployConfirmedEventFilter;
    DeployConfirmed(
      deployId?: null,
      operator?: null
    ): DeployConfirmedEventFilter;
  };

  estimateGas: {
    submit(
      _submissionId: PromiseOrValue<BytesLike>,
      _signatures: PromiseOrValue<BytesLike>,
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    submit(
      _submissionId: PromiseOrValue<BytesLike>,
      _signatures: PromiseOrValue<BytesLike>,
      _excessConfirmations: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
